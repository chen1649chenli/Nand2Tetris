// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBase;
    static boolean color;
    static Array blackMask;
    static Array whiteMask;

    /** Initializes the Screen. */
    function void init() {

        let blackMask = Array.new(16);
        let whiteMask = Array.new(16);
        let blackMask[0] = (-32767) - 1;
        let blackMask[1] = 16384;
        let blackMask[2] = 8192;
        let blackMask[3] = 4096;
        let blackMask[4] = 2048;
        let blackMask[5] = 1024;
        let blackMask[6] = 512;
        let blackMask[7] = 256;
        let blackMask[8] = 128;
        let blackMask[9] = 64;
        let blackMask[10] = 32;
        let blackMask[11] = 16;
        let blackMask[12] = 8;
        let blackMask[13] = 4;
        let blackMask[14] = 2;
        let blackMask[15] = 1;

        let whiteMask[0] = 32767;
        let whiteMask[1] = -16385;
        let whiteMask[2] = -8193;
        let whiteMask[3] = -4097;
        let whiteMask[4] = -2049;
        let whiteMask[5] = -1025;
        let whiteMask[6] = -513;
        let whiteMask[7] = -257;
        let whiteMask[8] = -129;
        let whiteMask[9] = -65;
        let whiteMask[10] = -33;
        let whiteMask[11] = -17;
        let whiteMask[12] = -9;
        let whiteMask[13] = -5;
        let whiteMask[14] = -3;
        let whiteMask[15] = -2 ;

        let screenBase = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitIndex;

        let address = (32 * y) + (x / 16);
        let value = Memory.peek(address + screenBase);
        let bitIndex = 15 - Math.mode(x, 16);
        if (color) { // draw black pixel
            let value = (value | blackMask[bitIndex]);
            do Memory.poke(address + screenBase, value);
        } else { // draw white pixel
            let value = (value & whiteMask[bitIndex]);
            do Memory.poke(address + screenBase, value);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, x, y;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let x = x1;
        let y = y1;
        let diff = 0;
        let a = 0;
        let b = 0;

        if ((x1 = x2) & (y1 = y2)) {
            do Screen.drawPixel(x1, y1);
            return;
        }

        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        if ((dy > 0) | (dy = 0)) {
            while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x + a, y + b);
    
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy; 
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        } else {
            while (((a < dx) | (a = dx)) & ((b < Math.abs(dy)) | (b = Math.abs(dy)))) {
                do Screen.drawPixel(x + a, y - b);
    
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + Math.abs(dy); 
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }            
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var boolean isStart, isEnd, isMiddle;
        var int start1, start2, middle1, middle2, end1, end2;
        var int pos;
        var int startAddr, endAddr, wordCount, wordColorValue, wordValue;

        let isStart = false;
        let isEnd = false;
        let isMiddle = false;

        if (x1 > x2) {
            return;
        }

        // check if we should draw the start segment.
        if (Math.mode(x1, 16) = 0) {
            let isStart = false;
        } else {
            let isStart = true;
            let start1 = x1; 
            if (x2 > (((x1 / 16) * 16) + 15)) {
                let start2 = ((x1 / 16) * 16) + 15;
                let isEnd = true;
            } else {
                let start2 = x2;
                let isEnd = false;
            }
        }

        // check if we should draw the middle segment.
        if (isStart) {
            if ((x2 - (((x1 / 16) + 1) * 16)) > 14) {
                let isMiddle = true;
                let middle1 = start2 + 1;
                if (Math.mode(x2, 16) = 15) {
                    let middle2 = x2;
                } else {
                    let middle2 = ((x2 / 16) - 1) * 16 + 15;
                    let isEnd = true;
                }
            } else {
                let isMiddle = false;
            }
        } else { // when the line starts at the beginning of the 16-bit.
            if ((x2 - x1) > 14) {
                let isMiddle = true;
                let middle1 = x1;
                if (Math.mode(x2, 16) = 15) {
                    let  middle2 = x2;
                } else {
                    let middle2 = ((x2 / 16) * 16) - 1;
                }
            } else {
                let isMiddle = false;
            }
        }

        // check if we should draw the end segment.
        if (Math.mode(x2, 16) = 15) {
            let isEnd = false;
        } else {
            if (Math.mode(x1, 16) = 0) {
                let isEnd = true;
            }
            if (isEnd) {
                let end2 = x2;
                if (isMiddle) {
                    let end1 = middle2 + 1;
                } else {
                    if(isStart) {
                        let end1 = start2 + 1;
                    } else {
                        let end1 = x1;
                    }
                }
            }
        }

        if(isStart) {
            // draw start
            let pos = start1;
            while(pos < (start2 + 1)) {
                do Screen.drawPixel(pos, y);
                let pos = pos + 1;
            }
        }

        if(isMiddle) {
            //draw middle
            if (color) {
                let wordColorValue = -1;
            } else {
                let wordColorValue = 0;
            }
            let startAddr = (32 * y) + (middle1 / 16);
            let endAddr = (32 * y) + ((middle2 + 1) / 16);
            let wordCount = endAddr - startAddr;

            while(wordCount > 0) {
                let wordValue = Memory.peek(startAddr + screenBase + wordCount - 1 );
                do Memory.poke(startAddr + screenBase + wordCount - 1, wordColorValue);
                let wordCount = wordCount - 1;
            }

        }

        if(isEnd) {
            //draw end
            let pos = end1;
            while(pos < (end2 + 1)) {
                do Screen.drawPixel(pos, y);
                let pos = pos + 1;
            }
        }
        return;

    }

    function void drawVerticalLine(int x, int y1, int y2) {
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int repeat;
        let repeat = y1;
        while(repeat < (y2 + 1)) {
            do Screen.drawHorizontalLine(x1, x2, repeat);
            let repeat = repeat + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
