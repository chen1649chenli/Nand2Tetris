function Math.init 2
push constant 15
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.multiply 1
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
call Math.abs 1
push argument 1
call Math.multiplyHelp 2
pop local 0
push local 0
neg
return
label IF_FALSE1
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push argument 1
call Math.abs 1
call Math.multiplyHelp 2
pop local 0
push local 0
neg
return
label IF_FALSE2
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 1
call Math.multiplyHelp 2
return
label IF_FALSE3
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.multiplyHelp 2
return
label IF_FALSE4
push constant 0
return
function Math.multiplyHelp 5
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
push argument 1
call Math.getNumberBitCount 1
pop local 3
label WHILE_EXP0
push local 2
push local 3
lt
not
if-goto WHILE_END0
push argument 1
push local 2
call Math.isIthBitSet 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.isIthBitSet 3
push argument 1
push static 0
add
pop pointer 1
push that 0
pop local 0
push argument 0
pop local 1
push constant 14
pop local 2
label WHILE_EXP0
push local 2
push argument 1
gt
not
if-goto WHILE_END0
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
gt
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
push static 0
add
pop pointer 1
push that 0
sub
pop local 1
label IF_FALSE0
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 1
push local 0
gt
push local 1
push local 0
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
goto IF_END1
label IF_FALSE1
push constant 0
return
label IF_END1
function Math.divide 1
push constant 0
pop local 0
push argument 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
call Math.abs 1
push argument 1
call Math.divideHelp 2
pop local 0
push local 0
neg
return
label IF_FALSE1
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push argument 1
call Math.abs 1
call Math.divideHelp 2
pop local 0
push local 0
neg
return
label IF_FALSE2
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divideHelp 2
pop local 0
push local 0
return
label IF_FALSE3
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
push argument 1
call Math.divideHelp 2
return
label IF_FALSE4
push constant 0
return
function Math.divideHelp 1
push constant 0
pop local 0
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 1
push argument 1
add
call Math.divideHelp 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 0
add
return
goto IF_END1
label IF_FALSE1
push local 0
push local 0
add
push constant 1
add
return
label IF_END1
function Math.sqrt 4
push constant 0
pop local 0
push argument 0
call Math.getNumberBitCount 1
pop local 2
push local 2
push constant 2
call Math.divide 2
pop local 1
label WHILE_EXP0
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END0
push local 0
push local 1
call Math.pow2 1
add
push local 0
push local 1
call Math.pow2 1
add
call Math.multiply 2
pop local 3
push local 3
push constant 0
gt
push local 3
push argument 0
lt
push local 3
push argument 0
eq
or
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
call Math.pow2 1
add
pop local 0
label IF_FALSE0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
function Math.getNumberBitCount 0
push argument 0
push constant 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
goto IF_END0
label IF_FALSE0
push argument 0
push constant 4
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
return
goto IF_END1
label IF_FALSE1
push argument 0
push constant 8
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 3
return
goto IF_END2
label IF_FALSE2
push argument 0
push constant 16
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 4
return
goto IF_END3
label IF_FALSE3
push argument 0
push constant 32
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 5
return
goto IF_END4
label IF_FALSE4
push argument 0
push constant 64
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 6
return
goto IF_END5
label IF_FALSE5
push argument 0
push constant 128
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 7
return
goto IF_END6
label IF_FALSE6
push argument 0
push constant 256
lt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 8
return
goto IF_END7
label IF_FALSE7
push argument 0
push constant 512
lt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 9
return
goto IF_END8
label IF_FALSE8
push argument 0
push constant 1024
lt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 10
return
goto IF_END9
label IF_FALSE9
push argument 0
push constant 2048
lt
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 11
return
goto IF_END10
label IF_FALSE10
push argument 0
push constant 4096
lt
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 12
return
goto IF_END11
label IF_FALSE11
push argument 0
push constant 8192
lt
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push constant 13
return
goto IF_END12
label IF_FALSE12
push argument 0
push constant 16384
lt
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push constant 14
return
goto IF_END13
label IF_FALSE13
push constant 15
return
label IF_END13
label IF_END12
label IF_END11
label IF_END10
label IF_END9
label IF_END8
label IF_END7
label IF_END6
label IF_END5
label IF_END4
label IF_END3
label IF_END2
label IF_END1
label IF_END0
function Math.pow 1
push constant 1
pop local 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push argument 0
call Math.multiply 2
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.pow2 1
push constant 1
pop local 0
label WHILE_EXP0
push argument 0
push constant 0
gt
not
if-goto WHILE_END0
push local 0
push local 0
add
pop local 0
push argument 0
push constant 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.mode 0
push argument 0
push argument 1
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
return
