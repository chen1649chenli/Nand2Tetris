// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int strMaxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let strMaxLength = 1;
        } else {
            let strMaxLength = maxLength;
        }
        let str = Array.new(strMaxLength);
        let length = 0;
        let strMaxLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > strMaxLength) | (j = strMaxLength)){
            return;
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < strMaxLength) {
            let str[length] = c;
            let length = length + 1;
        } else {
            do Sys.halt();
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        } else {
            do Sys.halt();
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int retVal, i, c, consecutive;
		var boolean negative;
		let retVal = 0;
		let i = 0;
		let consecutive = 1;
		if(str[0] = 45){
			let negative = true;
			let i = 1;
		}
		while((i < length) & (consecutive = 1)){
			let c = str[i] - 48; // largest value as at index 0
			if((c > -1) & (c < 10)) // value of c is between 0 and 9
			{
				let retVal = (retVal*10) + c; // append the value of c
			}
			else
			{
				let consecutive = 0; // the character was not a number, thus break while loop and return
			}
			let i = i + 1;
		}
		if (negative) {
			return -retVal;
		} else {
			return retVal;
		}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean isNegative;

        // handle negatives
        if (val < 0) {
            let val = -val;
            let isNegative = true;
        } else {
            let isNegative = false;
        }
  
        // modulus
        do setIntHelp(val, isNegative);

        return;
      }

      method void setIntHelp(int val, boolean flag) {
        var int lastDigit, c;

        // modulus
        let lastDigit = val - (val / 10 * 10);
        let c = 48 + lastDigit;

        if (flag) {
            if (val < 10) { // only for first digit
                let length = 0;
    
                do appendChar(45); // prepend neg sign
                do appendChar(c);
            } else {
                do setIntHelp(val / 10, flag);
                do appendChar(c);
            }
            
        } else {
            if (val < 10) { // only for first digit
                let length = 0;
                do appendChar(c);
            } else {
                do setIntHelp(val / 10, flag);
                do appendChar(c);
            }
        }
  
        return;
      }


    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
