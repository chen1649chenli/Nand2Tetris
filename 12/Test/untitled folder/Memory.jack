// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;
    static int freeListSize;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048; // heapbase
        let freeList = 2048;
        let heap[0] = 0;  // next
        let heap[1] = 14334; // total heap length
        let freeListSize = 1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int j, next;
        let j = 0;
        let next = freeList;
        while (j < freeListSize) {
            if (Memory.verifyBlock(next, size)) {
                // resize the block whose space will be cut
                do Memory.poke(next + 1, (Memory.peek(next + 1) - (size + 2)));

                // set the size value for the found block;
                do Memory.poke(next + Memory.peek(next + 1) + 3, size);

                // find the base address of block
                return next + Memory.peek(next + 1) + 4; // 4 = 2 * overheads
            } else {
                let next = Memory.peek(next);
            }
            let j = j + 1;
        }

        // no avaialble memory block that is big enough for the required size.
        return Sys.halt();
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int size, pointer, nextAddress;
        let nextAddress = freeList;
        // add the deAlloc block to the start of the freeList
        let freeList = o - 2;
        do Memory.poke(o - 2, nextAddress);
        let freeListSize = freeListSize + 1;
        return;
    }  
    
    function boolean verifyBlock(int blockAddress, int requiredSize) {
        if ((Memory.peek(blockAddress + 1) > (requiredSize + 2)) | (Memory.peek(blockAddress + 1) > (requiredSize + 2))) {
            return true;
        } else {
            return false;
        }

    }
}
