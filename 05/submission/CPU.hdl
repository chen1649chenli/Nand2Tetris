// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Step-1: A register
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ARegisterInput);
    // 计算loadA, instruction[15]=1时（C指令），需要考虑instruction[5]
    Not(in=instruction[15], out=Aload1);
    Or(a=Aload1, b=instruction[5], out=Aload);
    ARegister(in=ARegisterInput, load=Aload, out=ARegisterOutput, out[0..14]=addressM);


    // Step-2: D register
    // Only C command will operate on D regiser, and only when d2 =1, the C command output will be stored in D register. 
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=DRegisterOutput);

    // Step-3: ALU
    Mux16(a=ARegisterOutput, b=inM, sel=instruction[12], out=ALUIn);
    ALU(x=DRegisterOutput, y=ALUIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
    // When the command is C command and d3 is 1, the AwriteM control is 1.
    And(a=instruction[3], b=instruction[15], out=writeM);


    // Step-4: PC
    // calculate j1, j2 and j3
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);
    // Since zr and ng already tells is if the ALU out put is zero or negative, we just need to construct the logic to tell if the ALU output is positive
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=pos);
    // Construct the PC load
    And(a=j1, b=ng, out=l1);
    And(a=j2, b=zr, out=l2);
    And(a=j3, b=pos, out=l3);
    Or(a=l1, b=l2, out=o1);
    Or(a=o1, b=l3, out=load);
    // inc should always be true;
    PC(in=ARegisterOutput, load=load, inc=true, reset=reset, out[0..14]=pc);




}